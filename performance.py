def calculate_metrics(tp, fp, tn, fn):
    # Calculate accuracy
    accuracy = (tp + tn) / (tp + tn + fp + fn)

    # Calculate precision
    precision = tp / (tp + fp)

    # Calculate recall
    recall = tp / (tp + fn)

    # Calculate F1-Score
    f1_score = 2 * (precision * recall) / (precision + recall)

    return accuracy, precision, recall, f1_score

# Example usage:
true_positives = 80
false_positives = 10
true_negatives = 120
false_negatives = 20

accuracy, precision, recall, f1_score = calculate_metrics(true_positives, false_positives, true_negatives, false_negatives)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-Score:", f1_score)

import matplotlib.pyplot as plt

# Sample data for vulnerability detection results
vulnerability_types = ['Code Injection', 'SQL Injection', 'Local File Inclusion', 'Remote File Inclusion']
detected_counts = [80, 120, 45, 30]
false_positives = [5, 8, 3, 2]
false_negatives = [10, 15, 8, 5]

# Create a bar chart
fig, ax = plt.subplots(figsize=(10, 6))
bar_width = 0.35
index = range(len(vulnerability_types))

bar1 = plt.bar(index, detected_counts, bar_width, label='Detected', color='b')
bar2 = plt.bar(index, false_positives, bar_width, label='False Positives', color='r', bottom=detected_counts)
bar3 = plt.bar(index, false_negatives, bar_width, label='False Negatives', color='g', bottom=[i + j for i, j in zip(detected_counts, false_positives)])

plt.xlabel('Vulnerability Type')
plt.ylabel('Count')
plt.title('Vulnerability Detection Results')
plt.xticks(index, vulnerability_types)
plt.legend()

plt.tight_layout()
plt.show()
